plugins {
    id "java"
    id "application"
    id "maven"
    id "maven-publish"
    id "eclipse"
    id "idea"
    id "com.jfrog.bintray" version "1.2"
	id "me.champeau.gradle.antlr4" version "0.1"
}

group = "ch.liquidmind"
version = "2.0-alpha"
mainClassName = 'ch.liquidmind.inflection.compiler.InflectionCompiler'
//applicationDefaultJvmArgs = ['-agentlib:jdwp=transport=dt_socket,address=9009,server=y,suspend=y']

jar {
    from ("./LICENSE") {
        into "META-INF"
    }
}

repositories {
    mavenCentral()
	maven {
		url "http://dl.bintray.com/deflector/maven"
	}
}

sourceSets {
	main {
		resources {
            srcDir "src/main/resources"
            exclude "**/*.g4"
		}
	}
}

def debugLevelArg = "source,lines,vars";
compileJava.options.debugOptions.debugLevel = debugLevelArg;
compileTestJava.options.debugOptions.debugLevel = debugLevelArg;

dependencies {
	compile( "commons-io:commons-io:2.4" ) { transitive = false }
	compile( "__commons-io:commons-io-deflected:2.4" ) { transitive = false }
	compile( "org.antlr:antlr4:4.5" ) { transitive = false }
	compile( "__org.antlr:antlr4-deflected:4.5" ) { transitive = false }
	compile( "com.google.guava:guava:19.0" ) { transitive = false }
	compile( "org.codehaus.jackson:jackson-mapper-asl:1.9.13" ) { transitive = false }
	compile( "org.codehaus.jackson:jackson-core-asl:1.9.13" ) { transitive = false }
	compile( '__java:rt:1.8' ) { transitive = false }
	compile( 'commons-beanutils:commons-beanutils:1.9.2' ) { transitive = false }
	testCompile( "junit:junit:4.12" ) { transitive = false }

	runtime "commons-io:commons-io:2.4"
	runtime "__commons-io:commons-io-deflected:2.4"
	runtime "org.antlr:antlr4:4.5"
	runtime "__org.antlr:antlr4-deflected:4.5"
	runtime "com.google.guava:guava:19.0"
	runtime "org.codehaus.jackson:jackson-mapper-asl:1.9.13"
	runtime '__java:rt:1.8'
	runtime 'commons-beanutils:commons-beanutils:1.9.2'
	testRuntime "junit:junit:4.12"
}

// Antlr
antlr4 {
	source=file("src/main/resources/ch/liquidmind/inflection/grammar")
	output=file("$buildDir/generated/antlr/ch/liquidmind/inflection/grammar")
}
compileJava.dependsOn antlr4
sourceSets.main.java.srcDirs += "$buildDir/generated/antlr"

// Debugging
def debugInflectionBuildArg;

if ( this.hasProperty( "debugInflectionBuild" ) )
    debugInflectionBuildArg = "-agentlib:jdwp=transport=dt_socket,address=9009,server=y,suspend=y";
else
	debugInflectionBuildArg = "-DdummyArg";		// necessary if Mac OS X (other UNIX variants?)

task( inflect, type: JavaExec ) {
	main = "ch.liquidmind.inflection.InflectionBuild"
	classpath = sourceSets.main.runtimeClasspath
	jvmArgs = [ "$debugInflectionBuildArg" ]
	args = [
		"-classpath", sourceSets.test.compileClasspath.asPath,
		"-sourcepath", "${projectDir}/src/test/java:${projectDir}/src/test/resources",
		"-modelRegex", ".*ch(/|\\\\)liquidmind(/|\\\\)inflection(/|\\\\)test(/|\\\\)model(/|\\\\).*\\.java",
		"-target", "${buildDir}/inflection",
		"-annotations", ".*",
		"-mode", "BOOTSTRAP"
	]
}

compileTestJava.dependsOn inflect
sourceSets.test.java.srcDirs += "${buildDir}/inflection/proxy"
sourceSets.test.resources.srcDirs += "${buildDir}/inflection/taxonomy"

test {
	// Enable this to see test output:
	testLogging.showStandardStreams = true
}

// Sources JAR
task sourceJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
    from sourceSets.main.allSource
}

// Javadocs JAR
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourceJar
    archives javadocJar
}

eclipse {
	classpath {
		plusConfigurations = [ configurations.compile, configurations.testCompile ]
		downloadSources = true
		downloadJavadoc = true
	}
}

task moreStartScripts(type: CreateStartScripts) {
	mainClassName = "ch.liquidmind.inflection.util.InflectionPrinter"
	applicationName = "inflectionp"
	outputDir = new File(project.buildDir, 'scripts')
	classpath = jar.outputs.files + project.configurations.runtime
//	applicationDefaultJvmArgs = ['-agentlib:jdwp=transport=dt_socket,address=9009,server=y,suspend=y']
}

applicationDistribution.into("bin") {
	from(moreStartScripts)
	fileMode = 0755
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }

            pom.withXml {
                def root = asNode()
                root.appendNode('name',
                                    'ch.liquidmind:inflection')
                root.appendNode('description',
                                    'Turns checked exceptions into runtime exceptions by generating wrapper classes for arbitrary APIs in Java.')
                root.appendNode('url',
                                    'http://www.liquidmind.ch/')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The Apache License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')

                def scm = root.appendNode('scm')
                scm.appendNode('connection', 'scm:git:git@github.com:liquid-mind/inflection.git')
                scm.appendNode('developerConnection', 'scm:git:git@github.com:liquid-mind/inflection.git')
                scm.appendNode('url', 'git@github.com:liquid-mind/inflection.git')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('name', 'John Brush')
                developer.appendNode('email', 'brsh@zhaw.ch')
                developer.appendNode('organization', 'Liquidmind')
                developer.appendNode('organizationUrl', 'http://www.liquidmind.ch')
            }
        }
    }
}

bintray {
        publications = ['mavenJava']
        dryRun = false
        publish = false
        user=BINTRAY_USER
        key=BINTRAY_API_KEY
        pkg {
            repo = 'maven'
            name = 'inflection'
			licenses = ['Apache-2.0']
			vcsUrl = 'https://github.com/liquid-mind/inflection.git'
            version {
                gpg {
                    sign = true
                    passphrase=BINTRAY_GPG_PASS
                }
            }
        }
}
